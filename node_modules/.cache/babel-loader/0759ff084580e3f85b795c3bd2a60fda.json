{"ast":null,"code":"var _jsxFileName = \"/home/sumit/Documents/Hbo max clone/myapp/src/components/SearchResult.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Searchresult = () => {\n  _s();\n\n  const results = useSelector(state => state.search.data.results);\n  const loading = useSelector(state => state.search.loading);\n  return loading === true ? /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"...loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this) : results === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: results.map((media_type, title, overview, poster_path, id) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://image.tmdb.org/t/p/w500${poster_path}`,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: media_type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: overview\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this) : \"\";\n};\n\n_s(Searchresult, \"7h5tyT/U5WZKxAahSVnRBkHxCDI=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = Searchresult;\nexport default Searchresult;\n\nvar _c;\n\n$RefreshReg$(_c, \"Searchresult\");","map":{"version":3,"sources":["/home/sumit/Documents/Hbo max clone/myapp/src/components/SearchResult.jsx"],"names":["React","useSelector","Searchresult","results","state","search","data","loading","map","media_type","title","overview","poster_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAMC,OAAO,GAAGF,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaC,IAAb,CAAkBH,OAA9B,CAA3B;AACA,QAAMI,OAAO,GAAGN,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaE,OAAzB,CAA3B;AAEA,SAASA,OAAO,KAAK,IAAZ,gBACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADO,GAEJJ,OAAO,KAAK,IAAZ,gBACD;AAAA,cACCA,OAAO,CAACK,GAAR,CAAY,CAACC,UAAD,EAAaC,KAAb,EAAoBC,QAApB,EAA8BC,WAA9B,EAA2CC,EAA3C,KAAkD;AAC7D,0BAEE;AAAA,gCACE;AAAA,iCACE;AACE,YAAA,GAAG,EAAG,kCAAiCD,WAAY,EADrD;AAEE,YAAA,GAAG,EAAC;AAFN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE;AAAA,kCACE;AAAA,sBAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,sBAAIE;AAAJ;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA,SAAUE,EAAV;AAAA;AAAA;AAAA;AAAA,cAFF;AAgBD,KAjBA;AADD;AAAA;AAAA;AAAA;AAAA,UADC,GAqBD,EAvBJ;AAyBD,CA7BD;;GAAMX,Y;UACYD,W,EACAA,W;;;KAFZC,Y;AA+BN,eAAeA,YAAf","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst Searchresult = () => {\n  const results = useSelector((state) => state.search.data.results);\n  const loading = useSelector((state) => state.search.loading);\n\n  return ( loading === true ? (\n    <h1>...loading</h1>\n  ) :  results === true ?   (\n      <div>\n      {results.map((media_type, title, overview, poster_path, id) => {\n        return (\n            \n          <div key={id}>\n            <div>\n              <img\n                src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                alt=\"\"\n              />\n            </div>\n            <div>\n              <h1>{title}</h1>\n              <h1>{media_type}</h1>\n              <p>{overview}</p>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  ) : \"\"\n   )    \n};\n\nexport default Searchresult;\n"]},"metadata":{},"sourceType":"module"}